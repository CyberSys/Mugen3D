local Utils = require "utils"
local M = {}

M.Row = 7
M.Column = 6

local Phase = {
	Selecting = 1,
	Selected = 2,
	Loading = 3,
}

function M:Init(transform)
	self.view = transform:GetComponent(typeof(CS.FSoul.UI.LuaView))
    self.transform = transform
	self.prefabLittleHead = self.transform:Find("AllCharacter/LittleHead").gameObject
	self.grid = self.transform:Find("AllCharacter/Viewport/Grid")
	self.curSelectedCharacter = {}
	self.curSelectedCharacter["p1"] = {}
	self.curSelectedCharacter["p1"].labelName = self.transform:Find("CurrentCharacterP1/LabelName"):GetComponent("Text")
	self.curSelectedCharacter["p1"].img = self.transform:Find("CurrentCharacterP1/ImgMediumHead"):GetComponent("Image")
	self.curSelectedCharacter["p2"] = {}
	self.curSelectedCharacter["p2"].labelName = self.transform:Find("CurrentCharacterP2/LabelName"):GetComponent("Text")
	self.curSelectedCharacter["p2"].img = self.transform:Find("CurrentCharacterP2/ImgMediumHead"):GetComponent("Image")
	
	self.characterList  = {}
	self:CreateAllCharacter()
    self.phase = Phase.Selecting
	self.playerInfo = {}
	for i = 1, 2 do
		local playerId = "p" .. i
		self.playerInfo[playerId] = {}
		if i == 1 then
			self.playerInfo[playerId].pos = {row = 0, column = 0}
			self.playerInfo[playerId].characterId = self.characterList[1].id
		elseif i == 2 then
			self.playerInfo[playerId].pos = {row = 0, column = M.Column - 1}
			self.playerInfo[playerId].characterId = self.characterList[M.Column].id
		end
		self.playerInfo[playerId].isSelected = false
	end

	self.shouldBeUpdate = true
	--print(Utils.serialize(self.playerInfo))
end

function M:CreateAllCharacter()
    local characterIds = {}
    for k, v in ipairs(CSV.Character) do
	    table.insert(characterIds, v._VALUE)
	end
	self.characterIds = characterIds
    for i = 1, M.Row * M.Column do
	    local go = CS.UnityEngine.GameObject.Instantiate(self.prefabLittleHead, self.grid)
		go:SetActive(true)
		local id = characterIds[i]
		local character = {}
		if id then
		    character.id = id
		    character.go = go
		    character.imgNormalFrame = go.transform:Find("Pos/ImgFrame"):GetComponent("Image")
		    character.imgP1Select = go.transform:Find("Pos/ImgP1Select"):GetComponent("Image")
		    character.imgP2Select = go.transform:Find("Pos/ImgP2Select"):GetComponent("Image")
		    character.imgHead = go.transform:Find("Pos/ImgHead"):GetComponent("Image")
		    character.imgHead.sprite = CS.SpriteLoader.Instance:GetSprite(CSV.Character[id].LittleHead)
		else
		    character.id = -1
			character.imgP1Select = go.transform:Find("Pos/ImgP1Select"):GetComponent("Image")
		    character.imgP2Select = go.transform:Find("Pos/ImgP2Select"):GetComponent("Image")
			character.imgHead = go.transform:Find("Pos/ImgHead"):GetComponent("Image")
		    character.imgHead.sprite = CS.SpriteLoader.Instance:GetSprite("QuestionMark")
		end	
		self.characterList[i] = character
	end
end

function M:updateUI()
	local p1Pos = self.playerInfo["p1"].pos
	local p1Index = self:getIndex(p1Pos)
	local p2Pos = self.playerInfo["p2"].pos
	local p2Index = self:getIndex(p2Pos)
	for k, v in pairs(self.characterList) do
		local characterIcon = self.characterList[k]
		if k == p1Index then
			characterIcon.imgP1Select.gameObject:SetActive(true)
		elseif k == p2Index then
			characterIcon.imgP2Select.gameObject:SetActive(true)
		else
			 characterIcon.imgP1Select.gameObject:SetActive(false)
			 characterIcon.imgP2Select.gameObject:SetActive(false)
		end
	end
	for i = 1, 2 do
		local playerId = "p" .. i
		local characterId = self.playerInfo[playerId].characterId
		local config = CSV.Character[characterId]
		if config then
		    self.curSelectedCharacter[playerId].labelName.text = config.Name
            self.curSelectedCharacter[playerId].img.sprite = CS.SpriteLoader.Instance:GetSprite(config.MediumHead)
        end
	end
end

local function getRealPos(pos)
	if pos.row < 0 then
		pos.row = M.Row - 1
	elseif pos.row > M.Row -1 then
		pos.row = 0
	end
	if pos.column < 0 then
		pos.column = M.Column - 1
	elseif pos.column > M.Column -1 then
		pos.column = 0
	end
	return pos
end

function M:getIndex(pos)
	return pos.row * M.Column + pos.column + 1
end

local function updateP1Select(self)
	if self.playerInfo["p1"].isSelected == true then
		return
	end
	local isPosChange = false
	local p1RowAdd = 0
	local p1ColumnAdd = 0
	if CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.A) then
	    p1ColumnAdd = -1 
	    isPosChange = true
	elseif CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.D) then
	    p1ColumnAdd = 1 
	    isPosChange = true
	elseif CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.W) then
	    p1RowAdd = -1
	    isPosChange = true
	elseif CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.S) then
	    p1RowAdd = 1
	    isPosChange = true
	end
	if isPosChange then
		 self.playerInfo["p1"].pos.row = self.playerInfo["p1"].pos.row + p1RowAdd
	    self.playerInfo["p1"].pos.column = self.playerInfo["p1"].pos.column + p1ColumnAdd
	    self.playerInfo["p1"].pos = getRealPos(self.playerInfo["p1"].pos)
	    self.playerInfo["p1"].characterId = self.characterList[self:getIndex(self.playerInfo["p1"].pos)].id
		self.isPosChange = true
	end
	if CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.J) then
		self.playerInfo["p1"].isSelected = true
	end
end

local function updateP2Select(self)
	if self.playerInfo["p2"].isSelected == true then
		return
	end
	local isPosChange = false
	local p2RowAdd = 0
	local p2ColumnAdd = 0
    if CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.LeftArrow) then
	    p2ColumnAdd = -1
	    isPosChange = true
	elseif CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.RightArrow) then
	    p2ColumnAdd = 1
	    isPosChange = true
	elseif CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.UpArrow) then
	    p2RowAdd = -1
	    isPosChange = true
	elseif CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.DownArrow) then
	   p2RowAdd = 1
	   isPosChange = true
	end
	if isPosChange then
	    self.playerInfo["p2"].pos.row = self.playerInfo["p2"].pos.row + p2RowAdd
	    self.playerInfo["p2"].pos.column = self.playerInfo["p2"].pos.column + p2ColumnAdd
	    self.playerInfo["p2"].pos = getRealPos(self.playerInfo["p2"].pos)
	    self.playerInfo["p2"].characterId = self.characterList[self:getIndex(self.playerInfo["p2"].pos)].id
		self.isPosChange = true
	end
	if CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.Keypad1) then
		self.playerInfo["p2"].isSelected = true
	end
end

function M:ProcessKeyboardInput()
	self.isPosChange = false
	updateP1Select(self)
	updateP2Select(self)
	if self.isPosChange then
	    self.shouldBeUpdate = true
    end
    if CS.UnityEngine.Input.GetKeyDown(CS.UnityEngine.KeyCode.Escape) then
    	CS.UnityEngine.GameObject.Destroy(self.view.gameObject)
    end
end

local function randomSelectP1(self)
    if self.playerInfo["p1"].isSelected == true then
    	return
    end
	self.p1Timer = self.p1Timer or 0
	if self.characterList[self:getIndex(self.playerInfo["p1"].pos)].id == -1 then
	    self.p1Timer = self.p1Timer + CS.UnityEngine.Time.deltaTime
	    --print("p1Timer:" .. self.p1Timer)
		if self.p1Timer > 0.1 then
		   self.p1Timer = 0
		   local id = self:getRandomCharacterId()
		   self.playerInfo["p1"].characterId = id
		   self.shouldBeUpdate = true
		end    
	end
end

local function randomSelectP2(self)
	if self.playerInfo["p2"].isSelected == true then
    	return
    end
	self.p2Timer = self.p2Timer or 0
	if self.characterList[self:getIndex(self.playerInfo["p2"].pos)].id == -1 then
	    self.p2Timer = self.p2Timer + CS.UnityEngine.Time.deltaTime
		if self.p2Timer > 0.1 then
		   self.p2Timer = 0
		   local id = self:getRandomCharacterId()
		   self.playerInfo["p2"].characterId = id
		   self.shouldBeUpdate = true
		end    
	end
end

function M:Update()
	--print("p1Pos:" .. Utils.serialize(self.playerInfo["p1"].pos))
	--print("p1CharacterId:" .. self.playerInfo["p1"].characterId)
	if self.shouldBeUpdate then
        self:updateUI()
        self.shouldBeUpdate = false
    end
    if self.playerInfo["p2"].isSelected == true and self.playerInfo["p1"].isSelected == true and self.phase == Phase.Selecting then
    	self.phase = Phase.Selected
    end
    if self.phase == Phase.Selected then
    	self.phase = Phase.Loading
    	CS.SceneLoader.Instance:LoadFightScene(CS.PlayMode.SingleVS, "Origin", "Origin", "TrainingRoom")
    end
    --random select
    randomSelectP1(self)
    randomSelectP2(self)
end

function M:getRandomCharacterId()
    local index = math.random(1, #self.characterIds)
	return self.characterIds[index]
end

return M