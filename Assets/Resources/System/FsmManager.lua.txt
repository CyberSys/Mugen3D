local controller = require "controller.cs"
local trigger = require "trigger.cs"

local DefaultHitDef = {
	guardFlag = 0,
    hitType = 0,
    knockBackType = 0,
    knockBackForceLevel = 0,

    hitDamage = 10,
    hitPauseTime = {11, 13},
    hitSlideTime = 9,
    groundVel = {-5, 0},
    airVel = {-2, 2},

    guardDamage = 1,
    guardPauseTime = {11, 13},
    guardSlideTime = 9,  
    guardVel = {-4, 0},

    groundCornerPush = 1,
    airCornerPush = 0.5,
}

local controllers = {
    {name = "CreateHelper", func = controller.CreateHelper},
    {name = "DestroySelf",  func = controller.DestroySelf},
	{name = "ChangeAnim",   func = controller.ChangeAnim},
	{name = "ChangeFacing", func = controller.ChangeFacing},
	{name = "ChangeState",  func = controller.ChangeState},
	{name = "CtrlSet",      func = controller.CtrlSet},
	{name = "HitDefSet",    func = function(unit, hitDef)
	    for k, v in pairs(DefaultHitDef) do
	    	if hitDef[k] == nil then
	    		hitDef[k] = v
	    	end
	    end
		controller.HitDefSet(unit, hitDef)
	end},
	{name = "HitBy",        func = controller.HitBy},
	{name = "MoveTypeSet",  func = controller.MoveTypeSet},
	{name = "PhysicsSet",   func = controller.PhysicsSet},
	{name = "VelSet",       func = controller.VelSet},
	{name = "VelAdd",       func = controller.VelAdd},
	{name = "Pause",        func = controller.Pause},
	{name = "PosSet",       func = controller.PosSet},
}

local triggers = {
    {name = "Ctrl",         func = trigger.Ctrl},
	{name = "CommandTest",  func = trigger.CommandTest},
	{name = "Facing",       func = trigger.Facing},
	{name = "MoveType",     func = trigger.MoveType},
	{name = "PhysicsType",  func = trigger.PhysicsType},
	{name = "StateNo",      func = trigger.StateNo},
	{name = "StateTime",    func = trigger.StateTime},
	{name = "Anim",         func = trigger.Anim},
	{name = "AnimExist",    func = trigger.AnimExist},
	{name = "AnimTime",     func = trigger.AnimTime},
	{name = "AnimElem",     func = trigger.AnimElem},
	{name = "AnimElemTime", func = trigger.AnimElemTime},
	{name = "LeftAnimTime", func = trigger.LeftAnimTime},
	{name = "Vel",          func =  function(...)
        local x,y = trigger.Vel(...)
		return {x = x, y = y}
	end},
	{name = "Pos",          func = function( ... )
		local x, y = trigger.Pos(...)
		return {x = x, y = y}
	end},
	{name = "JustOnGround", func = trigger.JustOnGround},
	{name = "P2Dist",       func =  function(...)
		local x,y = trigger.P2Dist(...)
		return {x = x, y = y}
	end},
	{name = "P2MoveType", func = trigger.P2MoveType},
	{name = "GetHitVar",    func = trigger.GetHitVar},
	{name = "HitPauseTime", func = trigger.HitPauseTime},
	{name = "ParentPos", func =  function(...)
        local x,y = trigger.ParentPos(...)
		return {x = x, y = y}
	end},
	{name = "MoveContact", func = trigger.MoveContact},
	{name = "MoveGuarded", func = trigger.MoveGuarded},
	{name = "MoveHit",     func = trigger.MoveHit},
}

local function setCommonENVVars(env)
	env.print = print
	env.pairs = pairs
	env.math = math
end

local function createENV(csObjUnit)
	local warp = function(func)
		return function( ... )
		    return func(csObjUnit, ...)
		end
	end
	local env = {}
	setCommonENVVars(env)
	for _, controller in pairs(controllers) do
		env[controller.name] = warp(controller.func)
	end
	for _, trigger in pairs(triggers) do
		env[trigger.name] = warp(trigger.func)
	end
	local parent = trigger.Parent(csObjUnit)
	if parent then
		env.parent = createENV(parent)
	end
	return env
end

local function createFSM(scriptName, csObjUnit)
	local fsm = require(scriptName)
	local env = createENV(csObjUnit)
	local res = {
        update = function(stateNo, stateTime)
        	if fsm == nil then
		        return
	        end
            for i = -3, -1 do
    	        if fsm[i] and fsm[i].onUpdate then
		            fsm[i].onUpdate(env)
	            end
            end
            if stateTime == 0 then
            	if fsm[stateNo] and fsm[stateNo].onEnter then
	            fsm[stateNo].onEnter(env)
            end
            end
	        if fsm[stateNo] and fsm[stateNo].onUpdate then
	            fsm[stateNo].onUpdate(env)
            end
        end
    }
    return res
end

return {create = createFSM}